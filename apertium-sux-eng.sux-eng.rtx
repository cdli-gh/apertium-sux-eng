! Recursive trasnfer rule file from sumerian to english




!================================================================= ATTRIBUTE CATEGORIES ====================================================


! verb categories
v1 = neg mod1 ant v-pl v-rdp;
v2 = mod2 mod3 mod4 mod5 mod6 mod7 fin fin-l1 fin-l2;
v3 = coor;
v4 = ven;
v5 = mid 3-nh;
v6 = 1-sg 2-sg 3-sg-h 1-pl 3-pl 3-sg-nh;
v7 = dat;
v8 = com;
v9 = abl term;
v10 = l1 loc-ob l1-syn l2 l2-syn l3;
v11 =  1-sg-a 2-sg-a 3-sg-h-a 3-sg-h-p 3-sg-h-l3 1-sg-a-ob 3-sg-nh-a 3-sg-nh-p 3-sg-nh-l3 3-pl-h-p;  
v12 = cop;
v13 = (past past) pf plen past pres;
v14 = 3-sg-s 1-sg-a 1-sg-s 1-sg-p 2-sg-a 2-sg-s 2-sg-p 3-sg-s 3-sg-p 3-sg-a 3-sg-s-ob 1-pl-a 1-pl-s 1-pl 2-pl-a 2-pl-s 2-pl 3-pl-a 3-pl-s 3-pl-p 3-pl; 
v15 = sub;
adj_tag_1 = nf;
adj_tag_2 = pt;


! noun categories
n2 = dem dem3;
n3 = 1-sg-poss 2-sg-poss 3-sg-h-poss 3-sg-nh-poss dem2 1-pl-poss 2-pl-poss 3-pl-poss;
n4 = (sg sg) sg pl ord;
n5 = dat-h dat-nh com abl term l1 l2-h l2-nh l3-h l3-nh gen equ l4 adv;
n5_2 = abs erg;
n6 = cop-1-sg cop-2-sg cop-3-sg cop-1-pl cop-2-pl cop-3-pl except;

! name categories
names = pn on fn mn sn dn gn tn wn en an rn;


! chunk categories
subj_prn  = 1-sg-a 1-sg-s 1-sg-a 1-sg-a-ob 1-pl-a 1-pl-s 2-sg-a 2-sg-s 2-sg-a 2-pl-a 2-pl-s 3-sg-a 3-sg-s 3-sg-s-ob 3-sg-h-a 3-pl-a 3-pl-s 3-sg-nh-a; 
obj_prn = 1-sg-p 1-sg 1-pl 2-sg-p 2-sg 3-sg-p 3-sg-h-p 3-sg-h-l3 3-sg-h 3-sg-nh-p 3-sg-nh-l3 3-nh 3-pl-p 3-pl-h-p 3-pl 3-sg-nh;
inanimate_subj_prn = 3-sg-nh-a;
inanimate_obj_prn = 3-sg-nh-p 3-sg-nh-l3 3-nh 3-sg-nh;


!! ====================================================================== Patterns =================================================================
!! this is an output pattern, _ denotes the tag iteself like (prn) here, and then the other tags we need
!! the subtags may or may not be present, so there can be empty at the place of Person,Gender etc.
!! Here VP, NP etc are tags to the chunks in reduction rules, 


prn: _.prn_type.Person.Gender.Number;
vblex: _.v13;
n:_.n4;
num:_;
np: _.n4.n5.n5_2;
cnjcoo: _;
VP: _.v1.v2.v3.v4.v5.v6.v7.v8.v9.v10.v11.v12.v13.v14.v15.adj_tag_1.adj_tag_2;
NP: _.n2.n3.n4.n5.n5_2.n6;
combined_NP: _.n5.n5_2;
NU: _.n2.n3.n4.n5.n5_2.n6;
PR_NM: _.n2.n3.n4.n5.n5_2.n6;
combined_PR_NM: _.n2.n3.n4.n5.n5_2.n6;
CNJ: _;
S:_;



! ============================================================================== Macros ====================================================
! macro are conditional patterns, we define conditions and based on that we can produce output and tags

!!! ===============  1. macro for verbs  ===============

! lemmas that are used pre subjective pronoun
pre_subj_preposition:
            (
            if (1.v1 = neg)
                  [not@adv _ ]

            else-if ( (1.v1 = mod1) and (1.v13 = pres))
                  [it@prn is@aux possible@n that@cnjadv _ ]

            else-if ((1.v1 = mod1) and (1.v13 = past))
                  [it@prn is@aux certain@n that@cnjadv _ ]
            
            else-if (1.v1 = ant)
                  [after@cnjadv _ ]
            
            else-if  ((1.v1 = v-pl) or (1.v1 = v-rdp))
                  [do@vblex _ ]

            else-if (1.v2 = mod2)
                  [it@vblex is@aux _ ]

            else-if (1.v2 = mod5)
                  [if@vblex only@aux _ ]

            else-if (1.v2 = mod7)
                  [if@vblex is@aux certain@aux that@adv _ ]

            else-if (1.v15 = sub)
                  [that@cnjsubj _]
            else
                  []
            );



! lemmas subjective pronouns
subj_pronoun: 
            (
            if ( (1.v14 = "1-sg-a") or (1.v14 = "1-sg-s") or (1.v11 = "1-sg-a") or (1.v11 = "1-sg-a-ob") )
                  [prpers@prn.subj.p1.mf.sg _ ]
            else-if ( (1.v14 = "1-pl-a") or (1.v14 = "1-pl-s") )
                  [prpers@prn.subj.p1.mf.pl _ ]
            else-if ((1.v14 = "2-sg-a") or (1.v14 = "2-sg-s") or (1.v11 = "2-sg-a"))
                  [prpers@prn.subj.p2.mf.sg _ ]
            else-if ((1.v14 = "2-pl-a") or (1.v14 = "2-pl-s"))
                  [prpers@prn.subj.p2.mf.pl _ ]
            else-if (1.v11 = "3-sg-nh-a")
                  [prpers@prn.subj.p3.nt.sg _ ]
            else-if ((1.v14 = "3-sg-a") or (1.v14 = "3-sg-s") or (1.v14 = "3-sg-s-ob") or (1.v11 = "3-sg-h-a"))
                  [prpers@prn.subj.p3.m.sg _ ]
            else-if ((1.v14 = "3-pl-a") or (1.v14 = "3-pl-s"))
                  [prpers@prn.subj.p3.m.pl _ ]
            else
                  []
            );



! lemmas which are required after subjective pronoun or are connected to subjective pronouns
post_subj_preposition:
            (
            if (1.v2 = mod3)
                  [do@vblex not@adv _ ]
            else-if (1.v2 = mod2)
                  [intention@n to@n _ ]
            else-if (1.v2 = mod4)
                  (
                  if (1.v13 = past)
                        [certainly@adv  _ not@adv _ ]
                  else
                        [will@vblex.inf  _ not@adv _ ]
                  )
            else-if (1.v5 = mid)
                  [was@vblex _ ]
            else
                  []
            );



! adding pronoun it, in case of it is alreday present with dative or other tags
mid_prn: 
      (
            if ( ( (1.v7 not = "") or (1.v8 not = "") or (1.v9 not = "") or (1.v10 not = "") ) and (1.obj_prn not = "") )
                  [it@prn _ ]
            else
                  []
      );





! lemmas before objective pronoun
pre_obj_preposition:
            (
            if (1.v7 = dat)
                  [for@cnjadv _ ]
            else-if (1.v8 = com)
                  [with@cnjadv _ ]
            else-if (1.v9 = abl)
                  [from@cnjadv _ ]
            else-if (1.v9 = term)
                  [to@cnjadv _ ]
            else-if ((1.v10 = l1) or (1.v10 = l1-syn))
                  [in@cnjadv _ ]
            else-if ((1.v10 = l2) or (1.v10 = l2-syn))
                  [on@cnjadv _ ]
            else-if (1.v10 = l3)
                  [at@cnjadv _ ] 
            else-if (1.v4 = ven)
                  [towards@cnjadv _ ]     
            else
                  []
            );



! objective lemmas pronouns
obj_pronoun:
            (
            if ((1.v14 = "1-sg-p") or (1.v6 = "1-sg"))
                  [prpers@prn.obj.p1.mf.sg _ ]
            else-if (1.v6 = "1-pl")
                  [prpers@prn.obj.p1.mf.pl _ ]
            else-if ((1.v14 = "2-sg-p") or (1.v6 = "2-sg"))
                  [prpers@prn.obj.p2.mf.sg _ ]
            else-if ( ((1.v9 = abl) or (1.v10 = l2) or (1.v10 = "l2-syn"))  and (1.inanimate_obj_prn not =""))
                  [there@det _ ]
            else-if ( ((1.v10 = l1) or (1.v10 = "l1-syn")) and ( (1.inanimate_obj_prn not ="") or (1.inanimate_subj_prn not ="") ) )
                  [here@det _ ]
            else-if ((1.v10 = l3) and ( (1.inanimate_obj_prn not ="") or (1.inanimate_subj_prn not ="") ) )
                  [then@det _ ]
            else-if ((1.v14 = "3-sg-p") or (1.v11 = "3-sg-h-p") or (1.v11 = "3-sg-h-l3") or (1.v6 = "3-sg-h"))
                  [prpers@prn.obj.p3.m.sg _ ]   
            else-if ((1.v11 = "3-sg-nh-p") or (1.v11 = "3-sg-nh-l3") or (1.v5 = "3-nh"))
                  [prpers@prn.obj.p3.nt.sg _ ]
            else-if ((1.v14 = "3-pl-p") or (1.v11 = "3-pl-h-p") or (1.v6 = "3-pl"))
                  [prpers@prn.obj.p3.m.pl _ ]
            else
                  []
            );











!!! ===============  1. macro for nouns  ===============

! this,that before noun
demonstrative_proposition:
      (
            if ((1.n2 = dem) or (1.n3 = dem2))
                  [this@adv _ ]
            else-if (1.n2 = dem3)
                  [that@adv _ ]
            else
                  []
      );


! connecting pronouns (copula - connecting verbs)
connecting_pronouns: 
      (
            if (1.n6 = "cop-1-sg")
                  [prpers@prn.pos.p1.mf.sg _ am@pprn _ ]
            else-if (1.n6 = "cop-2-sg")
                  [prpers@prn.pos.p2.mf.sg _ are@vbser _ ]
            else-if (1.n6 = "cop-3-sg")
                  [prpers@prn.pos.p3.m.sg _ is@vbser _ ]
            else-if (1.n6 = "cop-1-pl")
                  [prpers@prn.pos.p1.mf.pl _ are@vbser _ ]
            else-if (1.n6 = "cop-2-pl")
                  [prpers@prn.pos.p2.mf.pl _ are@vbser _ ]
            else-if (1.n6 = "cop-3-pl")
                  [prpers@prn.pos.p3.mf.pl _ are@vbser _ ]
            else
                  []
      );




! case marker
pre_noun_preposition:

      (
            if (1.n5 = "dat-h")
                  [for@cnjadv _ ]
            else-if (1.n5 = dat-nh)
                  [to@cnjadv _ ]
            else-if (1.n5 = com)
                  [with@cnjadv _ ]
            else-if (1.n5 = abl)
                  [from@cnjadv _ ]
            else-if (1.n5 = term)
                  [towards@cnjadv _ ]
            else-if (1.n5 = l1)
                  [in@cnjadv _ ]
            else-if (1.n5 = "l2-h")
                  [to@cnjadv _ ]
            else-if (1.n5 = "l2-nh")
                  [on@cnjadv _ ]
            else-if (1.n5 = "l3-h")
                  [towards@cnjadv _ ]
            else-if (1.n5 = "l3-nh")
                  [at@cnjadv _ ]
            else-if (1.n5 = "gen")
                  [of@cnjadv _ ]
            else-if (1.n5 = "equ")
                  [like@cnjadv _ ]
            else-if (1.n5 = "adv")
                  [in@cnjadv the@det manner@n of@gen _ ]
            else
                  [ ]
      );



! possive pronouns before nouns
possive_pronouns:

      (
            if (1.n3 = "1-sg-poss")
                  [prpers@prn.pos.p1.mf.sg _ ]
            else-if (1.n3 = "2-sg-poss")
                  [prpers@prn.pos.p2.mf.sg _ ]
            else-if (1.n3 = "3-sg-h-poss")
                  [prpers@prn.pos.p3.m.sg _ ]
            else-if (1.n3 = "3-sg-nh-poss")
                  [prpers@prn.pos.p3.nt.sg _ ]
            else-if (1.n3 = "1-pl-poss")
                  [prpers@prn.pos.p1.mf.pl _ ]
            else-if (1.n3 = "2-pl-poss")
                  [prpers@prn.pos.p2.mf.pl _ ]
            else-if (1.n3 = "3-pl-poss")
                  [prpers@prn.pos.p3.mf.pl _ ]
            else
                  []
      );


! determiner inclusion
det_manager:
            (
            if (1.n3 = "")
                  [the@det _ ]
            else
                  []   
            );










!! ==================================================================== REDUCTION RULES ================================================================


!! conjucation
CNJ -> cnjcoo {1};



!! numericals
NU -> %num { 1(demonstrative_proposition) 1(connecting_pronouns) 1(pre_noun_preposition) 1(possive_pronouns)  _ 1 };



!! Personal Name
PR_NM -> %np {1(demonstrative_proposition) 1(connecting_pronouns) 1(pre_noun_preposition) 1(possive_pronouns)  _ 1 };



! when 2 nameed entities are together
combined_PR_NM -> %PR_NM %PR_NM {
                        (
                              if (1.n5 not = "")
                                    [2 _ 1]
                              else-if ( (1.names = pn) and (2.names=pn) )
                                    [1 _ and@cnjadv _ 2]
                              else
                                    [1 _ 2]
                        )
                  } |
                  %PR_NM {1};

      
!! Nouns 
NP -> %n { 
      1(demonstrative_proposition) 1(connecting_pronouns) 1(pre_noun_preposition) 1(possive_pronouns)  _ 1 
      };



!! Verbs
VP -> %NP %vblex {
            (
            if ( ( (2.subj_prn not = "") and (1.n5_2 = abs) ) or ( (2.adj_tag_1 = nf) ) )
                  [2(pre_subj_preposition)  2(subj_pronoun)  2(post_subj_preposition)  2 _ 1 _ ]
            else
                  [2(pre_subj_preposition)  _ 1 _ 2(post_subj_preposition)  2 _ 2(mid_prn) 2(pre_obj_preposition) 2(obj_pronoun)]
            )
      } | %combined_PR_NM %vblex {
            (
            if ( ( (2.subj_prn not = "") and (1.n5_2 = abs) ) or ( (2.adj_tag_1 = nf) ) )
                  [2(pre_subj_preposition)  2(subj_pronoun)  2(post_subj_preposition)  2 _ 1 _ ]
            else
                  [2(pre_subj_preposition)  _ 1 _ 2(post_subj_preposition)  2 _ 2(mid_prn) 2(pre_obj_preposition) 2(obj_pronoun)]
            )
      } |
      %combined_PR_NM %vblex {
            (
            if ( ( (2.subj_prn not = "") and (1.n5_2 = abs) ) or ( (2.adj_tag_1 = nf)  ) )
                  [ 2(pre_subj_preposition)  2(subj_pronoun) 2(post_subj_preposition)  2 _ 2(mid_prn) 2(pre_obj_preposition) 2(obj_pronoun) _ 1 _ ]
            else
                  [2(pre_subj_preposition)  _ 1 _ 2(post_subj_preposition)  2 _ 2(mid_prn) 2(pre_obj_preposition) 2(obj_pronoun)]
            )
      } |
      %vblex {
            1(pre_subj_preposition)  1(subj_pronoun) 1(post_subj_preposition)  1 _ 1(mid_prn) 1(pre_obj_preposition) 1(obj_pronoun) 
            } | 
      %NP %NP {
            (
            if (1.n5 not = "")
                  [2 _ 1]
            else
                  [1 _ 2]
            )
      } | 
      %NP {
             1 
      } | 
      %NP %NU { 
      2 _ 1 
};











!! ===================================================== EXTRA RULES COMMENTED (May need later) ================================================================


!! Verbs
!VP -> %vblex {
!      1(pre_subj_preposition)  1(subj_pronoun) 1(post_subj_preposition)  1 _ 1(mid_prn) 1(pre_obj_preposition) 1(obj_pronoun) 
!      };


!S -> combined_NP VP { 
!      (
!      if ( (2.subj_prn not = "") and (1.n5_2 = abs) )
!            [ 2 _ 1 ]
!      else-if (2.adj_tag_1 not = "")
!            [ 2 _ 1 ]
!      else
!            [ 1 _ 2 ]
!      )
!}; 

! Noun root
!      (
!            if ((1.n5 = abs) and (1.n5 not = erg))
!                 [ _ 1[n4=subj] ]
!            else-if ((1.n5 = abs) and (1.n5 = erg))
!                [ _ 1[n4=obj] ]
!            else
!                 [ _ 1[prn_type = indobj] ]
!
!      )
!      };


! SEN -> NP VP {
!      (
!            if (1.prn_type=indobj)
!            [2 _ 1]
!            else
!            [1 _ 2]
!      )
!      };


!! The final order we need

!SEN -> NP NP VP { 3 _ 1 _ 2 } | 
!      NP VP { 2 _ 1 };



!SEN -> NP { (if (1.prn_type = obj)
!            subj@n 
!            )
!            _ 1 };


! Resources:
! https://wiki.apertium.org/wiki/Apertium-recursive
! https://wiki.apertium.org/wiki/Apertium-recursive/Formalism
! https://wiki.apertium.org/wiki/Apertium-recursive/Cookbook
